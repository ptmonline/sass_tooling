/// Retorna el valor de z-index asignado en un mapa sass
/// @access public
/// @param {String} $layer - nombre de capa
/// @return {Number}
/// @require $z-indexes map dentro de app.variables.scss
@function z( $layer ) {
  @if not map-has-key( $z-indexes, $layer ) {
    @error 'There is no layer named `#{$layer}` in $z-indexes. '
         + 'Layer should be one of #{map-keys($z-indexes)}.';
  }

  @return map-get( $z-indexes, $layer );
}


/// Retorna el valor de la fuente si está
/// en el mapa de tamaños de fuente
/// @access public
/// @param {string} $key - nombre de la clave
/// @return {string}
@function get-size( $key ) {
  @if map-has-key( $font-sizes, $key ) {
    @return map-get( $font-sizes, $key );
  }

  @warn 'Unknown `#{$key}` in $font-sizes.';
  @return null;
}

/// Retorna el color si está en el mapa de colores
/// @access public
/// @param {string} $key - Nombre de la clave
/// @return {string}
@function get-color( $key, $map-colors: $map-of-colors ) {
  @if map-has-key( $map-colors, $key ) {
    @return map-get( $map-colors, $key );
  }
  @warn 'Unknown `#{$key}` in $colors.';
  @return null;
}

/// Compute the maximum depth of a map
/// @param {Map} $map
/// @return {Number} max depth of `$map`
@function depth($map) {
  $level: 1;

  @each $key, $value in $map {
    @if type-of($value) == "map" {
      $level: max(depth($value) + 1, $level);
    }
  }

  @return $level;
}

/// Fetch nested keys
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
/// @return {*}

@function map-deep-get($map, $keys) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}